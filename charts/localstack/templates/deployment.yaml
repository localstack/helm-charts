apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "localstack.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "localstack.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" $ ) | nindent 4 }}
  selector:
    matchLabels:
      {{- include "localstack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "localstack.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "localstack.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: {{ .Values.service.edgeService.name }}
              containerPort: {{ .Values.service.edgeService.targetPort }}
              protocol: TCP
            {{- range .Values.service.apiServices }}
            - name: {{ .name }}
              containerPort: {{ .targetPort }}
              protocol: TCP
            {{- end }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
            httpGet:
              path: /health
              port: {{ .Values.service.edgeService.name }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
            httpGet:
              path: /health
              port: {{ .Values.service.edgeService.name }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if coalesce (and (.Values.mountDind.enabled) (.Values.mountDind.forceTLS)) .Values.enableStartupScripts .Values.persistence.enabled }}
          volumeMounts:
            {{- if and (.Values.mountDind.enabled) (.Values.mountDind.forceTLS) }}
              - name: dind-tls
                mountPath: /opt/docker/tls
            {{- end }}
            {{- if .Values.enableStartupScripts }}
              - name: {{ template "localstack.fullname" . }}-init-scripts-config
                mountPath: /docker-entrypoint-initaws.d
            {{- end }}
            {{- if .Values.persistence.enabled }}
              - name: data
                mountPath: /tmp/localstack
            {{- end }}
          {{- end }}
          env:
            - name: DEBUG
              value: {{ ternary "1" "0" .Values.debug | quote }}
            {{- if .Values.kinesisErrorProbability }}
            - name: KINESIS_ERROR_PROBABILITY
              value: {{ .Values.kinesisErrorProbability | quote }}
            {{- end }}
            {{- if .Values.lambdaExecutor }}
            - name: LAMBDA_EXECUTOR
              value: {{ .Values.lambdaExecutor | quote }}
            {{- end }}
            {{- if .Values.persistence.enabled }}
            - name: DATA_DIR
              value: /tmp/localstack/data
            {{- end }}
            {{- if .Values.startServices }}
            - name: SERVICES
              value: {{ .Values.startServices | quote }}
            {{- end }}
            {{- if .Values.mountDind.enabled }}
            {{- if .Values.mountDind.forceTLS }}
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: DOCKER_CERT_PATH
              value: /opt/docker/tls/client
            {{- else }}
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            {{- end }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.mountDind.enabled }}
        - name: dind
          image: {{ .Values.mountDind.image | quote }}
          securityContext:
            privileged: true
          env:
            {{- if .Values.mountDind.forceTLS }}
            - name: DOCKER_TLS_CERTDIR
              value: "/opt/docker/tls"
            {{- else }}
            - name: DOCKER_TLS_CERTDIR
              value: ""
            {{- end }}
          volumeMounts:
            - name: dind-storage
              mountPath: /var/lib/docker
            {{- if .Values.mountDind.forceTLS }}
            - name: dind-tls
              mountPath: /opt/docker/tls
            {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
      {{- if .Values.persistence.enabled }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "common.names.fullname" .) }}
      {{- end }}
      {{- if .Values.mountDind.enabled }}
      - name: dind-storage
        emptyDir: {}
      {{- if .Values.mountDind.forceTLS }}
      - name: dind-tls
        emptyDir: {}
      {{- end }}
      {{- end }}
      {{- if .Values.enableStartupScripts }}
      - name: {{ template "localstack.fullname" . }}-init-scripts-config
        configMap:
          name: {{ template "localstack.fullname" . }}-init-scripts-config
      {{- end }}
